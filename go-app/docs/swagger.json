{
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for user api.",
        "title": "User API for  recipes project",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "liduhon3@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:5000",
    "basePath": "/api",
    "paths": {
        "/users/delete": {
            "delete": {
                "description": "Deletes a user from the system using their user ID. If the deletion is successful, an email is sent to confirm the account deletion. If the email fails to send, the deletion is rolled back.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delete user"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "description": "User ID to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.DeleteUserWithIdInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted and email sent successfully",
                        "schema": {
                            "$ref": "#/definitions/response.DeleteUserWithEmailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete user, rollback attempted if necessary",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Authenticates a user with email and password, returning access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Login"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input or bad request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or unverified email",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Failed to query user or generate tokens",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Register a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users Registration"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SignedUpUserOutput"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/users/reset-password": {
            "post": {
                "description": "Send a password reset token to the user's email address if they have a verified email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password Reset Request"
                ],
                "summary": "sending Reset password request",
                "parameters": [
                    {
                        "description": "Password Reset Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.PasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset request success",
                        "schema": {
                            "$ref": "#/definitions/response.ResetRequestOutput"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials or unverified email",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/users/update-password": {
            "post": {
                "description": "Send a password reset token to the user's email address if they have a verified email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reset Password"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Password Reset Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdatePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset request success",
                        "schema": {
                            "$ref": "#/definitions/response.UpdatePasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials or unverified email",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/users/update-profile": {
            "put": {
                "description": "Update the profile details of a user, including username, phone, profile picture, and role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "update user profile"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "User profile update details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.UpdateResponce"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/users/user": {
            "post": {
                "description": "Fetches a user from the database using their unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get user by ID"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "description": "User ID input",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.GetUserByIdInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/response.SingleUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to query user data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/verify-email": {
            "post": {
                "description": "Verifies a user's email by checking the verification token and updating the user's status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Verification"
                ],
                "summary": "Verify user email",
                "parameters": [
                    {
                        "description": "User email verification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.EmailVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "schema": {
                            "$ref": "#/definitions/response.VerifyEmailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired verification token",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "models.ImageInput": {
            "type": "object",
            "properties": {
                "base64String": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "requests.DeleteUserWithIdInput": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "integer"
                }
            }
        },
        "requests.EmailVerifyRequest": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "object",
                    "required": [
                        "user_id",
                        "verification_token"
                    ],
                    "properties": {
                        "user_id": {
                            "type": "integer"
                        },
                        "verification_token": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "requests.GetUserByIdInput": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "object",
                    "required": [
                        "id"
                    ],
                    "properties": {
                        "id": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "requests.LoginRequest": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string"
                        },
                        "password": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "requests.PasswordResetRequest": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "object",
                    "required": [
                        "email"
                    ],
                    "properties": {
                        "email": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "requests.RegisterRequest": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "object",
                    "required": [
                        "email",
                        "password",
                        "phone",
                        "userName"
                    ],
                    "properties": {
                        "email": {
                            "type": "string"
                        },
                        "image": {
                            "$ref": "#/definitions/models.ImageInput"
                        },
                        "password": {
                            "type": "string",
                            "minLength": 6
                        },
                        "phone": {
                            "type": "string"
                        },
                        "role": {
                            "type": "string"
                        },
                        "userName": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "requests.UpdatePasswordRequest": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "object",
                    "required": [
                        "password",
                        "token",
                        "userId"
                    ],
                    "properties": {
                        "password": {
                            "type": "string",
                            "minLength": 6
                        },
                        "token": {
                            "type": "string"
                        },
                        "userId": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "requests.UpdateRequest": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "object",
                    "required": [
                        "phone",
                        "userId",
                        "userName"
                    ],
                    "properties": {
                        "image": {
                            "$ref": "#/definitions/models.ImageInput"
                        },
                        "phone": {
                            "type": "string"
                        },
                        "role": {
                            "type": "string"
                        },
                        "userId": {
                            "type": "integer"
                        },
                        "userName": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "response.DeleteUserWithEmailResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.LoginResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/response.UserResponse"
                }
            }
        },
        "response.ResetRequestOutput": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.SignedUpUserOutput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "refreshToken": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "response.SingleUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.UpdatePasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.UpdateResponce": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "response.VerifyEmailResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}